
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

    #根据IP地址限制速度
    # 1）第一个参数 $binary_remote_addr
    #    binary_目的是缩写内存占用量，remote_addr表示通过ip地址来限流
    # 2）第二个参数 zone=iplimit:20m
    #    iplimit是一块内存区域（记录访问频率信息），20m是指这个块内存区域的大小
    # 3）第三个参数 rate=1r/s
    #    比如100/m, 表示访问的限流频率
    limit_req_zone $binary_remote_addr zone=iplimit:20m rate=10r/s;

    #根据服务器级别做限流
    limit_req_zone $server_name zone=serverlimit:10m rate=100r/s;

    #基于连接数级别的限流
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;

	server{
		server_name www.imooc-trining.com;
		location /access-limit/ {
           proxy_pass http://127.0.0.1:10086/;

           # 基于ip地址的限制
           # 1）第一个参数 zone=iplimit => 引用limit_req_zone中的zone变量
           # 2）第二个参数 burst=2， 设置一个大小为2的缓冲区域，当大量请求到来。
           #    请求数量超过限流频率时，将其放入缓冲区域
           # 3）第三个参数 nodelay => 缓存区满了以后返回503异常
           limit_req zone=iplimit burst=2 nodelay;

           #基于服务器级别的限制
           #通常情况下server级别的限流速率是最大的
           limit_req zone=serverlimit burst=1 nodelay;

            #每个server最大保持100个连接
           limit_conn perserver 100;

           #每个ip地址最多保持一个连接
           limit_conn perip 1;

           # 异常情况返回504 (默认是503)
           limit_req_status 504;
           limit_conn_status 504;
        }

        #彩蛋
        # 前100下载不限速，100M以后限速256k
        location /download/ {
            limit_rate_after 100m;
            limit_rate 256k;
        }

	}

}
